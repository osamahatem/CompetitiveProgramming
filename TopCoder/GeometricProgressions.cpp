#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

set<int> fact;
vector<int> facts;
set<vector<int> > all;

void factor(int temp) {
	for (int i = 2; i * i <= temp; i++) {
		while (temp % i == 0) {
			fact.insert(i);
			temp /= i;
		}
	}
	if (temp > 1)
		fact.insert(temp);
}

void init(int b1, int q1, int b2, int q2) {
	facts.clear();
	facts.push_back(0);
	facts.push_back(1);
	all.clear();
	fact.clear();
	factor(b1);
	factor(q1);
	factor(b2);
	factor(q2);
	set<int>::iterator it;
	for (it = fact.begin(); it != fact.end(); it++)
		facts.push_back(*it);
}

vector<int> getVector(int x) {
	vector<int> temp(facts.size(), 0);
	if (x < 2) {
		temp[x] = 1;
		return temp;
	}
	for (int i = 2; i < (int) facts.size(); i++)
		while (x % facts[i] == 0) {
			x /= facts[i];
			temp[i]++;
		}
	return temp;
}

vector<int> add(vector<int> a, vector<int> b) {
	vector<int> ret;
	for (int i = 0; i < (int) a.size(); i++)
		ret.push_back(a[i] + b[i]);
	return ret;
}

vector<int> fix(vector<int> a) {
	if (a[0]) {
		a[0] = 1;
		for (int i = 1; i < (int) a.size(); i++)
			a[i] = 0;
		return a;
	}
	if (a[1]) {
		for (int i = 2; i < (int) a.size(); i++)
			if (a[i]) {
				a[1] = 0;
				return a;
			}
		a[1] = 1;
		for (int i = 2; i < (int) a.size(); i++)
			a[i] = 0;
	}
	return a;
}

void add(int b, int q, int n) {
	vector<int> temp = fix(getVector(b));
	vector<int> vq = fix(getVector(q));
	all.insert(temp);
	for (int i = 1; i < n; i++) {
		temp = fix(add(temp, vq));
		all.insert(temp);
	}
}

class GeometricProgressions {
public:
	int count(int b1, int q1, int n1, int b2, int q2, int n2) {
		init(b1, q1, b2, q2);
		add(b1, q1, n1);
		add(b2, q2, n2);
		return all.size();
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4,
		int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	GeometricProgressions *obj;
	int answer;
	obj = new GeometricProgressions();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;

	{
		// ----- test 0 -----
		p0 = 3;
		p1 = 2;
		p2 = 5;
		p3 = 6;
		p4 = 2;
		p5 = 5;
		p6 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 3;
		p1 = 2;
		p2 = 5;
		p3 = 2;
		p4 = 3;
		p5 = 5;
		p6 = 9;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = 0;
		p4 = 0;
		p5 = 1;
		p6 = 2;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 3;
		p1 = 4;
		p2 = 100500;
		p3 = 48;
		p4 = 1024;
		p5 = 1000;
		p6 = 100500;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
