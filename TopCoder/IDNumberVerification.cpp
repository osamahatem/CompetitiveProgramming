#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool isleap(int y){
    if(y%400==0)
        return true;
    if(y%4==0 && y%100!=0)
        return true;
    return false;
}

bool isdatevalid(int y,int m,int d){
    int days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    if(isleap(y)) days[1]=29;
    if(y<1900 || y>2011) return false;
    if(m>12) return false;
    if(d>days[m-1]) return false;
    return true;
}

bool ischecksumvalid(long long digits,char x){
    int temp=2,checksum=0;
    while(digits>0){
        checksum+=(digits%10)*temp;
        temp*=2;
        digits/=10;
        checksum%=11;
    }
    if(x=='X') checksum+=10;
    else checksum+=x-'0';
    checksum%=11;
    if(checksum==1) return true;
    return false;
}

class IDNumberVerification {
public:
	string verify(string id, vector <string> regionCodes) {
	    int y,m,d,scode;
	    long long digits;
	    char temp[20],checksum;
	    string rcode;
		sscanf(id.c_str(),"%6s",temp);
		rcode=string(temp);
		if(!binary_search(regionCodes.begin(),regionCodes.end(),rcode))
            return "Invalid";
        sscanf(id.c_str()+6,"%4d%2d%2d",&y,&m,&d);
        if(!isdatevalid(y,m,d))
            return "Invalid";
        sscanf(id.c_str()+14,"%3d",&scode);
        if(scode==0)
            return "Invalid";
        sscanf(id.c_str()+17,"%c",&checksum);
        sscanf(id.c_str(),"%17lld",&digits);
        if(!ischecksumvalid(digits,checksum))
            return "Invalid";
        if(scode%2==0)
            return "Female";
        return "Male";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IDNumberVerification *obj;
	string answer;
	obj = new IDNumberVerification();
	clock_t startTime = clock();
	answer = obj->verify(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "441323200312060636";
	string t1[] = {"441323"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Male";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "62012319240507058X";
	string t1[] = {"620123"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Female";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "321669197204300886";
	string t1[] = {"610111","659004"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "230231198306900162";
	string t1[] = {"230231"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "341400198407260005";
	string t1[] = {"341400"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "520381193206090891";
	string t1[] = {"532922","520381"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
