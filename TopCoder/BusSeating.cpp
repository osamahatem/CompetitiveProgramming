#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

double dist(pair<int,int> a,pair<int,int> b){
    int dx=abs(a.first-b.first),dy=abs(a.second-b.second);
    return sqrt(dx*dx+dy*dy);
}

class BusSeating {
public:
	double getArrangement(string leftRow, string rightRow) {
        vector<pair<int,int> > val;
        int i,j,k;
        double ret=1000.0,temp;
        for(i=0;i<leftRow.size();i++)
            if(leftRow[i]=='-')
                val.push_back(make_pair(0,i));
        for(i=0;i<rightRow.size();i++)
            if(rightRow[i]=='-')
                val.push_back(make_pair(2,i));
        for(i=0;i<val.size();i++)
            for(j=i+1;j<val.size();j++)
                for(k=j+1;k<val.size();k++){
                    temp=dist(val[i],val[j]);
                    temp+=dist(val[k],val[j]);
                    temp+=dist(val[i],val[k]);
                    ret=min(ret,temp);
                }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	BusSeating *obj;
	double answer;
	obj = new BusSeating();
	clock_t startTime = clock();
	answer = obj->getArrangement(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	double p2;

	{
	// ----- test 0 -----
	p0 = "----------";
	p1 = "----------";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "XXX-X-XX-X";
	p1 = "-XXXX---XX";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "XXXXXXXXXX";
	p1 = "-XX-XX-X--";
	p2 = 6.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "XXX-X-XX-X";
	p1 = "XXX-X-XX-X";
	p2 = 6.82842712474619;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
