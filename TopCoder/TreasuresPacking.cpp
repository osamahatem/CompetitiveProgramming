#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

struct non_div{
    int w,c;
};

struct divi{
    int w;
    double rat;
};

bool cmp(const divi &a,const divi &b){
    return a.rat>b.rat;
}

int best[55][10005],rest;
double best_div[10005],tot;

class TreasuresPacking {
public:
	double maximizeCost(vector <string> treasures, int W) {
        int i,j,w,c;
        char t;
        non_div temp;
        divi temp2;
        vector<non_div> nd;
        vector<divi> d;
        for(i=0;i<treasures.size();i++){
            sscanf(treasures[i].c_str(),"%d%d %c",&w,&c,&t);
            if(t=='N'){
                temp.w=w;
                temp.c=c;
                nd.push_back(temp);
            }else{
                temp2.w=w;
                temp2.rat=(double)c/w;
                d.push_back(temp2);
            }
        }
        sort(d.begin(),d.end(),cmp);
        for(i=0;i<=W;i++)
            best[0][i]=0;
        for(i=1;i<=nd.size();i++){
            for(j=0;j<=W;j++){
                best[i][j]=best[i-1][j];
                if(j>=nd[i-1].w)
                    best[i][j]=max(best[i][j],nd[i-1].c+best[i-1][j-nd[i-1].w]);
            }
        }
        for(i=0;i<=W;i++){
            j=0;
            rest=i;
            tot=0;
            while(rest>0 && j<d.size()){
                tot+=d[j].rat*min(d[j].w,rest);
                rest-=min(d[j].w,rest);
                j++;
            }
            best_div[i]=tot;
        }
        double ret=0;
        for(i=0;i<=W;i++)
            ret=max(ret,best[nd.size()][i]+best_div[W-i]);
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TreasuresPacking *obj;
	double answer;
	obj = new TreasuresPacking();
	clock_t startTime = clock();
	answer = obj->maximizeCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	double p2;

	{
	// ----- test 0 -----
	string t0[] = {"100 100 N","100 100 N","130 10 Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 150;
	p2 = 103.84615384615384;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"100 100 N","100 100 N","100 1000 Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 150;
	p2 = 1000.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"207 1459 Y","150 6867 N","694 3494 Y","417 7479 N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 650;
	p2 = 14931.00966183575;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"350 2765 Y","258 560 Y","120 9325 N","879 302 Y","611 2674 Y","774 2273 Y","318 1572 Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3301;
	p2 = 19467.907849829353;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
