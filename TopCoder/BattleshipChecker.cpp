#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

bool valid(int i,int j){
    if(i<0 || j<0)
        return false;
    if(i>=10 || j>=10)
        return false;
    return true;
}

class BattleshipChecker {
public:
	string checkBoard(vector <string> board) {
	    bool vis[11][11];
	    int ships[5];
		memset(vis,0,sizeof vis);
		memset(ships,0,sizeof ships);
		int i,j,dx,dy,touch;
		for(i=0;i<10;i++){
            for(j=0;j<10;j++){
                if(vis[i][j])
                    continue;
                vis[i][j]=1;
                if(board[i][j]=='X'){
                    touch=0;
                    for(dx=-1;dx<=1;dx++){
                        for(dy=-1;dy<=1;dy++){
                            if(dx==0 && dy==0)
                                continue;
                            if(valid(i+dx,j+dy) && board[i+dx][j+dy]=='X'){
                                touch++;
                                if(dy!=0 && dx!=0)
                                    touch+=2;
                            }
                        }
                    }
                    if(touch>2)
                        return "REJECTED";
                    if(touch==0){
                        ships[1]++;
                        continue;
                    }
                    for(dx=-1;dx<=1;dx++){
                        for(dy=-1;dy<=1;dy++){
                            if(dx!=0 && dy!=0)
                                continue;
                            if(dx==0 && dy==0)
                                continue;
                            if(valid(i+dx,j+dy) && board[i+dx][j+dy]=='X'){
                                int x=i+dx,y=j+dy,len=1;
                                while(valid(x,y) && board[x][y]=='X' && !vis[x][y]){
                                    len++;
                                    vis[x][y]=1;
                                    x+=dx;
                                    y+=dy;
                                }
                                if(len>4)
                                    return "REJECTED";
                                ships[len]++;
                            }
                        }
                    }
                }
            }
		}
		for(i=1;i<=4;i++)
            if(ships[i]+i!=5)
                return "REJECTED";
        int p=0;
        bool flagr,flagc;
        char ret[30];
        for(i=0;i<10;i++){
            flagr=flagc=0;
            for(j=0;j<10;j++){
                if(board[i][j]=='X')
                    flagr=1;
                if(board[j][i]=='X')
                    flagc=1;
            }
            p+=2-flagr-flagc;
        }
        sprintf(ret,"ACCEPTED, %d POINTS",p);
        return (string)ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BattleshipChecker *obj;
	string answer;
	obj = new BattleshipChecker();
	clock_t startTime = clock();
	answer = obj->checkBoard(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"......X...",".XXX..X...","......X...","X.X...X...","X.........","...XX.X...","......X...",".XX...X...","..........",".X.X..X..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ACCEPTED, 5 POINTS";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"X.X.X.X...","......X...",".XX...X...","......X...","......X..X","...X..X...","...X..X...","......X...","..XX..X...","......X..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "REJECTED";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {".....XX...",".XX.......","..........",".X....XXX.",".X........",".....X....","..X..X....",".....X....","...X......","X.....XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "REJECTED";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {".....XX..X",".XX......X","..........",".X....XXX.",".X........",".....X..X.","..X..X....",".....X....","...X......","X.....XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "REJECTED";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"X.......X.","...XXXX...",".X......X.","....XX....",".........X",".........X",".....XXX..",".........X","..X......X","..X......X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ACCEPTED, 0 POINTS";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"X.......X.","...XXXX...",".X......X.","....XX....","...X.....X","...X.....X",".....XXX..",".........X",".........X",".........X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "REJECTED";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
