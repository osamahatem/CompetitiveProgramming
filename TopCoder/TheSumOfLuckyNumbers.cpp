#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

vector<int> all,best;
int dp[1000005];

void getall(int cur,int n){
    if(n==6)
        return;
    all.push_back(cur*10+4);
    all.push_back(cur*10+7);
    getall(cur*10+4,n+1);
    getall(cur*10+7,n+1);
    return;
}

int solve(int cur){
    if(cur==0)
        return dp[cur]=0;
    if(cur<0)
        return 1<<30;
    int &ret=dp[cur];
    if(ret!=-1)
        return ret;
    ret=1<<30;
    for(int i=0;i<all.size();i++)
        ret=min(ret,1+solve(cur-all[i]));
    return ret;
}

void bk_trk(int cur){
    if(cur==0)
        return;
    for(int i=0;i<all.size();i++){
        if(cur-all[i]>=0 && dp[cur]==1+dp[cur-all[i]]){
            best.push_back(all[i]);
            bk_trk(cur-all[i]);
            break;
        }
    }
    return;
}

class TheSumOfLuckyNumbers {
public:
	vector <int> sum(int n) {
	    memset(dp,-1,sizeof dp);
	    all.clear();
	    best.clear();
		getall(0,0);
		sort(all.begin(),all.end());
		solve(n);
		bk_trk(n);
		return best;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TheSumOfLuckyNumbers *obj;
	vector <int> answer;
	obj = new TheSumOfLuckyNumbers();
	clock_t startTime = clock();
	answer = obj->sum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;

	{
	// ----- test 0 -----
	p0 = 11;
	int t1[] = {4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 12;
	int t1[] = {4,4,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 13;
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 100;
	int t1[] = {4,4,4,44,44};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
