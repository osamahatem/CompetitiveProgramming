#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

struct gloss{string orig,lo;};

bool cmp(const gloss &a,const gloss &b){
    return a.lo<b.lo;
}

class Glossary {
public:
	vector <string> buildGlossary(vector <string> items) {
		int i,j;
		bool vis[26];
		memset(vis,0,sizeof vis);
		vector<string> left,right,ret;
		string temp;
		vector<gloss> itms;
		gloss t;
		left.clear(),right.clear(),ret.clear();
		for(i=0;i<items.size();i++){
            temp.clear();
            for(j=0;j<items[i].size();j++)
                temp+=tolower(items[i][j]);
            t.lo=temp;
            t.orig=items[i];
            itms.push_back(t);
		}
        sort(itms.begin(),itms.end(),cmp);
        char x;
        for(i=0;i<itms.size();i++){
            x=itms[i].lo[0];
            if(!vis[x-'a']){
                vis[x-'a']=1;
                if(x>'m'){
                    temp.clear();
                    temp+=toupper(x);
                    for(j=0;j<18;j++)
                        temp+=' ';
                    right.push_back(temp);
                    temp.clear();
                    for(j=0;j<19;j++)
                        temp+='-';
                    right.push_back(temp);
                }else{
                    temp.clear();
                    temp+=toupper(x);
                    for(j=0;j<18;j++)
                        temp+=' ';
                    left.push_back(temp);
                    temp.clear();
                    for(j=0;j<19;j++)
                        temp+='-';
                    left.push_back(temp);
                }
            }
            temp.clear();
            temp+="  ";
            temp+=itms[i].orig;
            for(j=0;j<17-itms[i].orig.size();j++)
                temp+=' ';
            if(x>'m')
                right.push_back(temp);
            else
                left.push_back(temp);
        }
        i=0;
        while(i<left.size() || i<right.size()){
            if(i>=left.size()){
                temp.clear();
                for(j=0;j<21;j++)
                    temp+=' ';
                ret.push_back(temp+right[i]);
            }else if(i>=right.size()){
                temp.clear();
                for(j=0;j<21;j++)
                    temp+=' ';
                ret.push_back(left[i]+temp);
            }else{
                temp.clear();
                temp=left[i]+"  "+right[i];
                ret.push_back(temp);
            }
            i++;
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Glossary *obj;
	vector <string> answer;
	obj = new Glossary();
	clock_t startTime = clock();
	answer = obj->buildGlossary(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
	// ----- test 0 -----
	string t0[] = {"Canada","France","Germany","Italy","Japan","Russia","United Kingdom","United States"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"C                    R                  ","-------------------  -------------------","  Canada               Russia           ","F                    U                  ","-------------------  -------------------","  France               United Kingdom   ","G                      United States    ","-------------------                     ","  Germany                               ","I                                       ","-------------------                     ","  Italy                                 ","J                                       ","-------------------                     ","  Japan                                 "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"alpha","beta","gamma","delta","omega"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                    O                  ","-------------------  -------------------","  alpha                omega            ","B                                       ","-------------------                     ","  beta                                  ","D                                       ","-------------------                     ","  delta                                 ","G                                       ","-------------------                     ","  gamma                                 "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"AVL tree","backtracking","array","balanced tree","binary search"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                                       ","-------------------                     ","  array                                 ","  AVL tree                              ","B                                       ","-------------------                     ","  backtracking                          ","  balanced tree                         ","  binary search                         "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"XXXXXXXXXXXXXXXXX","YYYYYYYYYYYYYYYYY","ZZZZZZZZZZZZZZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"                     X                  ","                     -------------------","                       XXXXXXXXXXXXXXXXX","                     Y                  ","                     -------------------","                       YYYYYYYYYYYYYYYYY","                     Z                  ","                     -------------------","                       ZZZZZZZZZZZZZZZZZ"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"Asteria","Astraeus","Atlas","Clymene","Coeus","Crius","Cronus","Dione","Epimetheus","Helios","Hyperion","Iapetus","Leto","Mnemosyne","Oceanus","Ophion","Phoebe","Prometheus","Rhea","Tethys","Theia","Themis"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                    O                  ","-------------------  -------------------","  Asteria              Oceanus          ","  Astraeus             Ophion           ","  Atlas              P                  ","C                    -------------------","-------------------    Phoebe           ","  Clymene              Prometheus       ","  Coeus              R                  ","  Crius              -------------------","  Cronus               Rhea             ","D                    T                  ","-------------------  -------------------","  Dione                Tethys           ","E                      Theia            ","-------------------    Themis           ","  Epimetheus                            ","H                                       ","-------------------                     ","  Helios                                ","  Hyperion                              ","I                                       ","-------------------                     ","  Iapetus  "
			"                             ","L                                       ","-------------------                     ","  Leto                                  ","M                                       ","-------------------                     ","  Mnemosyne                             "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
