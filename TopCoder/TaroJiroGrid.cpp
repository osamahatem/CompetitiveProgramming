#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

set<vector<string> > vis;

bool check(vector<string> &grid) {
	for (int i = 0; i < (int) grid.size(); i++) {
		int cur = 1, maxi = 1;
		for (int j = 1; j < (int) grid.size(); j++) {
			if (grid[j][i] == grid[j - 1][i])
				cur++;
			else {
				maxi = max(maxi, cur);
				cur = 1;
			}
		}
		maxi = max(maxi, cur);
		if (maxi > (int) grid.size() / 2)
			return false;
	}
	return true;
}

int BFS(vector<string> grid) {
	queue<vector<string> > Q;
	string W((int) grid.size(), 'W'), B((int) grid.size(), 'B');
	Q.push(grid);
	int ans = 0;
	while (Q.size()) {
		int s = Q.size();
		while (s--) {
			vector<string> cur = Q.front();
			Q.pop();
			if (check(cur))
				return ans;
			if (vis.count(cur))
				continue;
			vis.insert(grid);
			for (int i = 0; i < (int) grid.size(); i++) {
				vector<string> temp = cur;
				temp[i] = W;
				if (!vis.count(temp))
					Q.push(temp);
				temp[i] = B;
				if (!vis.count(temp))
					Q.push(temp);
			}
		}
		ans++;
	}
	return -1;
}

class TaroJiroGrid {
public:
	int getNumber(vector<string> grid) {
		return BFS(grid);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<string> p0, bool hasAnswer,
		int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TaroJiroGrid *obj;
	int answer;
	obj = new TaroJiroGrid();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = { "WB", "BB" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "WB", "WW" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "WB", "WB" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "WBBW", "WBWB", "WWBB", "BWWW" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "WBBWBB", "BBWBBW", "WWBWBW", "BWWBBB", "WBWBBW",
				"WWWBWB" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
