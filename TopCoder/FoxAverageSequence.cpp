#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

class FoxAverageSequence {
	const long long MOD = 1000000007;
	long long dp[1600][40][40][2];
	vector<int> s;

public:
	long long solve(int sum, int last, int idx, int dec) {
		if (dec == 2)
			return 0;
		if (idx == (int) s.size())
			return 1;
		int lim = (idx == 0 ? 40 : sum / idx);
		if (s[idx] != -1){
			if (s[idx] > lim)
				return 0;
			return solve(sum + s[idx], s[idx], idx + 1,
					(s[idx] < last ? dec + 1 : 0));
		}
		long long &ret = dp[sum][last][idx][dec];
		if (ret != -1)
			return ret;
		ret = 0;
		for (int i = 0; i <= lim; i++) {
			ret += solve(sum + i, i, idx + 1, (i < last ? dec + 1 : 0));
			ret %= MOD;
		}
		return ret;
	}

	int theCount(vector<int> seq) {
		memset(dp, -1, sizeof dp);
		s = seq;
		return solve(0, 0, 0, 0);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAverageSequence *obj;
	int answer;
	obj = new FoxAverageSequence();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	int p1;

	{
		// ----- test 0 -----
		int t0[] = { 3, -1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 5, 3, -1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { -1, 0, 40 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { -1, 40, -1, -1, -1, 10, -1, -1, -1, 21, -1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 579347890;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { -1, 12, 25, 0, 18, -1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 58;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
