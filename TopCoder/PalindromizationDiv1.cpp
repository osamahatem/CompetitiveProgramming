#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

long long memo[51][51], minChange[27][27], matchCost[27][27];
string w;

void init() {
	memset(memo, -1, sizeof memo);
	for (int i = 0; i < 27; i++) {
		for (int j = 0; j < 27; j++)
			matchCost[i][j] = minChange[i][j] = 1ll << 58;
		matchCost[i][i] = minChange[i][i] = 0;
	}
}

void gen() {
	for (int k = 0; k < 27; k++)
		for (int i = 0; i < 27; i++)
			for (int j = 0; j < 27; j++)
				minChange[i][j] = min(minChange[i][j],
						minChange[i][k] + minChange[k][j]);
	for (int i = 0; i < 27; i++)
		for (int j = 0; j < 27; j++)
			for (int k = 0; k < 27; k++)
				matchCost[i][j] = min(matchCost[i][j],
						minChange[i][k] + minChange[j][k]);
}

long long solve(int a, int b) {
	if (a >= b)
		return 0;
	long long &ret = memo[a][b];
	if (ret != -1)
		return ret;
	ret = 1ll << 58;
	int c1 = w[a] - 'a', c2 = w[b] - 'a';
	ret = min(ret, matchCost[c1][c2] + solve(a + 1, b - 1));
	ret = min(ret, matchCost[c1][26] + solve(a + 1, b));
	ret = min(ret, matchCost[c2][26] + solve(a, b - 1));
	return ret;
}

class PalindromizationDiv1 {
public:
	int getMinimumCost(string word, vector<string> operations) {
		w = word;
		init();
		for (int i = 0; i < (int) operations.size(); i++) {
			stringstream ss;
			string op;
			char a, b;
			int c;
			ss << operations[i];
			ss >> op;
			if (op == "change") {
				ss >> a >> b >> c;
				minChange[a - 'a'][b - 'a'] = c;
			} else {
				ss >> a >> c;
				if (op == "add")
					minChange[26][a - 'a'] = c;
				else
					minChange[a - 'a'][26] = c;
			}
		}
		gen();
		long long ret = solve(0, (int) word.size() - 1);
		return (ret == (1ll << 58) ? -1 : ret);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector<string> p1,
		bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector<string> p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = "racecar";
		p1.clear() /*{}*/;
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "topcoder";
		string t1[] = { "erase t 1", "erase o 1", "erase p 1", "erase c 1",
				"erase d 1", "erase e 1", "erase r 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 5;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "topcoder";
		string t1[] = { "erase t 10", "erase o 1", "erase p 1", "erase c 1",
				"erase d 1", "erase e 1", "erase r 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 7;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "caaaaaab";
		string t1[] = { "change b a 100000", "change c a 100000",
				"change c d 50000", "change b e 50000", "erase d 50000",
				"erase e 49999" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 199999;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "moon";
		string t1[] = { "erase o 5", "add u 7", "change d p 3", "change m s 12",
				"change n d 6", "change s l 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
