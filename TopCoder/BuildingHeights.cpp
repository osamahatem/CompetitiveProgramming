#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BuildingHeights {
public:
	int minimum(vector <int> heights) {
	    int ans=0,wind=0;
		sort(heights.begin(),heights.end());
		vector<int> dif,sum;
		dif.push_back(0);
		sum.push_back(0);
		for(int i=1;i<heights.size();i++)
            dif.push_back(heights[i]-heights[i-1]),sum.push_back(dif[i]*i+sum[i-1]);
        for(int i=0;i<heights.size();i++){
            wind=sum[i];
            int tempAns=wind,tempWind=wind;
            for(int j=i+1;j<heights.size();j++){
                tempWind=(sum[j]-sum[j-i-1])/j;
                tempAns=min(tempAns,tempWind);
            }
            ans^=tempAns;
            if(i==2)
                return tempAns;
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BuildingHeights *obj;
	int answer;
	obj = new BuildingHeights();
	clock_t startTime = clock();
	answer = obj->minimum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1,5,4,3,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 22;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {3,4,1,6,8,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {990,20,2359,1667,51,2455,1659,1093,2015,205,656,752,1760,1594,857,2033,1868,1932,2408,1518,91,2220,1696,1552,933,143,1888,1261,2298,1975,929,2139,1994,2139,158,896,2093,1816,841,459,2020,1496,63,131,589,919,1015,1308,350,922,326,1792,641,2021,843,425,1015,231,1685,2165,1057,1465,655,550,1103,812,297,2048,1479,1137,6,2350,1484,1420,1332,925,2338,1198,2232,1539,2119,57,830,1611,929,525,888};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 56068;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
