#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool cmp(int a,int b){
    return a>b;
}

class PackingBallsDiv1 {
public:
	int minPacks(int K, int A, int B, int C, int D) {
		int X[100005],i,extra,ret=0;
		X[0]=A;
		for(i=1;i<K;i++)
            X[i]=((long long)X[i-1]*B+C)%D+1;
		for(i=0;i<K;i++){
            ret+=X[i]/K;
            X[i]%=K;
		}
		sort(X,X+K,cmp);
		extra=X[0];
		for(i=1;i<K;i++)
            extra=min(extra,i+X[i]);
        return ret+extra;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	PackingBallsDiv1 *obj;
	int answer;
	obj = new PackingBallsDiv1();
	clock_t startTime = clock();
	answer = obj->minPacks(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;

	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 4;
	p2 = 2;
	p3 = 5;
	p4 = 6;
	p5 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 58;
	p2 = 23;
	p3 = 39;
	p4 = 93;
	p5 = 58;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 23;
	p1 = 10988;
	p2 = 5573;
	p3 = 4384;
	p4 = 100007;
	p5 = 47743;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 100000;
	p1 = 123456789;
	p2 = 234567890;
	p3 = 345678901;
	p4 = 1000000000;
	p5 = 331988732;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
