#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

vector<int> asset;

int get_ans(int idx,int first,int second){
    int i,temp=0,temp2=0,best=0,best2=0,cur_sum=0;
    for(i=0;i<idx;i++){
        cur_sum+=asset[i];
        temp=max(max(cur_sum,first-cur_sum),second);
        temp2=first+second-temp-min(min(cur_sum,first-cur_sum),second);
        if(temp2>best2 || (temp2==best2 && temp>best)){
            best=temp;
            best2=temp2;
        }
    }
    cur_sum=0;
    for(i=idx+1;i+1<asset.size();i++){
        cur_sum+=asset[i];
        temp=max(max(cur_sum,second-cur_sum),first);
        temp2=first+second-temp-min(min(cur_sum,second-cur_sum),first);
        if(temp2>best2 || (temp2==best2 && temp>best)){
            best=temp;
            best2=temp2;
        }
    }
    return first+second-best-best2;
}

class UnfairDivision {
public:
	int albertsShare(vector <int> assets) {
		int i=0,tot[50],total=assets[0],ret=0;
		tot[0]=assets[0];
		asset=assets;
		for(i=1;i<assets.size();i++)
            tot[i]=tot[i-1]+assets[i],total+=assets[i];
        for(i=0;i+1<assets.size();i++)
            ret=max(ret,get_ans(i,tot[i],total-tot[i]));
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	UnfairDivision *obj;
	int answer;
	obj = new UnfairDivision();
	clock_t startTime = clock();
	answer = obj->albertsShare(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {50,90,10,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
