#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

double solve(int gen, int x1, int y1, int x2, int y2) {
	if (gen < 0 || x1 >= 27 || x2 <= -27 || y1 >= 81 || y2 <= 0)
		return 0.0;

	if (x1 <= -27 && x2 >= 27 && y1 <= 0 && y2 >= 81)
		return gen * 54 + 81;

	x1 = max(x1, -27);
	x2 = min(x2, 27);
	y1 = max(y1, 0);
	y2 = min(y2, 81);
	double ret = 0.0;
	if (x1 <= 0 && x2 >= 0)
		ret += max(0, min(y2, 54) - max(y1, 0));

	ret += solve(gen - 1, 3 * (y1 - 54), -3 * x2, 3 * (y2 - 54), -3 * x1) / 3;
	ret += solve(gen - 1, 3 * x1, 3 * (y1 - 54), 3 * x2, 3 * (y2 - 54)) / 3;
	ret += solve(gen - 1, -3 * (y2 - 54), 3 * x1, -3 * (y1 - 54), 3 * x2) / 3;
	return ret;
}

class FractalPicture {
public:
	double getLength(int x1, int y1, int x2, int y2) {
		return solve(499, x1, y1, x2, y2);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3,
		bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3;
	cout << "]" << endl;
	FractalPicture *obj;
	double answer;
	obj = new FractalPicture();
	clock_t startTime = clock();
	answer = obj->getLength(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	double p4;

	{
		// ----- test 0 -----
		p0 = -1;
		p1 = 0;
		p2 = 1;
		p3 = 53;
		p4 = 53.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 1;
		p1 = 1;
		p2 = 10;
		p3 = 10;
		p4 = 0.0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = -10;
		p1 = 54;
		p2 = 10;
		p3 = 55;
		p4 = 21.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 14;
		p1 = 45;
		p2 = 22;
		p3 = 54;
		p4 = 2999.0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
