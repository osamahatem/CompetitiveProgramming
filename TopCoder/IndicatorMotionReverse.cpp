#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

map<char,int> mp;

char get_action(char a,char b){
    int ma=mp[a],mb=mp[b];
    if(ma-mb==1 || ma-mb==-3)
        return 'L';
    if(ma-mb==-1 || ma-mb==3)
        return 'R';
    if(ma==mb)
        return 'S';
    return 'F';
}

string convert(char last,int cnt){
    string ret="";
    if(cnt%99>0){
        ret+=last;
        ret+=(char)('0'+(cnt%99)/10);
        ret+=(char)('0'+(cnt%99)%10);
        cnt-=cnt%99;
    }
    while(cnt>0){
        ret+=last;
        ret+="99";
        cnt-=99;
    }
    return ret;
}

class IndicatorMotionReverse {
public:
	string getMinProgram(vector <string> actions) {
		mp['|']=0,mp['/']=1,mp['-']=2,mp['N']=3;
		int i,cnt=0;
		char last='X',cur;
		string ret="",itr="";
		for(i=0;i<actions.size();i++)
            itr+=actions[i];
		for(i=1;i<itr.size();i++){
            cur=get_action(itr[i-1],itr[i]);
            if(cur!=last){
                if(last!='X')
                    ret+=convert(last,cnt);
                last=cur;
                cnt=1;
                continue;
            }
            cnt++;
		}
		if(last!='X')
            ret+=convert(last,cnt);
		if(ret.size()>100){
            ret=ret.substr(0,97);
            ret+="...";
        }
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IndicatorMotionReverse *obj;
	string answer;
	obj = new IndicatorMotionReverse();
	clock_t startTime = clock();
	answer = obj->getMinProgram(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"-|-|/-/|//////-/"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "F03R02L02R01S05R01L01";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "S50S99";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L...";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
