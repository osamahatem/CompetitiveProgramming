#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int valid[100];

bool can_get(int sum,int cur,int left){
    if(cur-1>sum)
        return false;
    if(left==0)
        return true;
    if(left<0 || cur>left)
        return false;
    bool flag=can_get(sum+cur,cur+1,left-cur);
    if(flag){
        valid[cur]=1;
        return flag;
    }
    valid[cur]=-1;
    flag=can_get(sum,cur+1,left);
    return flag;
}

class IdealString {
public:
	string construct(int length) {
		bool flag=can_get(0,1,length);
		if(!flag)
            return "";
        int i,j;
        vector<int> val;
        for(i=0;i<100;i++)
            if(valid[i]==1)
                val.push_back(i);
        char ret[105];
        ret[length]='\0';
        for(i=0;i<length;i++)
            ret[i]='#';
        for(i=0;i<val.size();i++)
            ret[--val[i]]='A'+i;
        j=0;
        for(i=0;i<length;i++){
            if(ret[i]=='#'){
                if(val[j]==0)
                    j++;
                ret[i]='A'+j;
                val[j]--;
            }
        }
        return (string)ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	IdealString *obj;
	string answer;
	obj = new IdealString();
	clock_t startTime = clock();
	answer = obj->construct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = "A";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = "ABB";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 2;
	p1 = "";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 6;
	p1 = "ABCBCC";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 7;
	p1 = "ABBCCCC";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 5;
	p1 = "";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
