#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ABBADiv1 {
public:
	string canObtain(string initial, string target) {
		int found = -1;
		while (found + initial.size() < target.size()) {
			found = target.find(initial, found + 1);
			if (found == -1)
				break;
			int b1 = count(target.begin(), target.begin() + found, 'B');
			int b2 = count(target.begin() + found + initial.size(),
					target.end(), 'B');
			if (b1 == b2 && (!found || target[0] != 'A'))
				return "Possible";
		}
		reverse(initial.begin(), initial.end());
		found = -1;
		while (found + initial.size() < target.size()) {
			found = target.find(initial, found + 1);
			if (found == -1)
				break;
			int b1 = count(target.begin(), target.begin() + found, 'B');
			int b2 = count(target.begin() + found + initial.size(),
					target.end(), 'B');
			if (b1 - b2 == 1 && target[0] != 'A')
				return "Possible";
		}
		return "Impossible";
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer,
		string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\""
			<< p1 << "\"";
	cout << "]" << endl;
	ABBADiv1 *obj;
	string answer;
	obj = new ABBADiv1();
	clock_t startTime = clock();
	answer = obj->canObtain(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;

	{
		// ----- test 0 -----
		p0 = "A";
		p1 = "BABA";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "BAAAAABAA";
		p1 = "BAABAAAAAB";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "A";
		p1 = "ABBA";
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "AAABBAABB";
		p1 = "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "AAABAAABB";
		p1 = "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB";
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
