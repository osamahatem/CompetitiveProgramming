#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

class KingdomXCitiesandVillagesAnother {
	struct DisjointSet {
		vector<int> rank, root;

		DisjointSet(int n) {
			rank.resize(n);
			root.resize(n);
			for (int i = 0; i < n; i++)
				rank[i] = 0, root[i] = i;
		}

		int find(int x) {
			if (root[x] == x)
				return x;
			return root[x] = find(root[x]);
		}

		bool merge(int a, int b) {
			int fa = find(a);
			int fb = find(b);
			if (fa == fb)
				return false;
			if (rank[fa] < rank[fb])
				root[fa] = root[fb];
			else
				root[fb] = root[fa];
			if (rank[fa] == rank[fb])
				rank[fa]++;
			return true;
		}
	};

	struct edge {
		double dist;
		int u, v;

		const bool operator <(const edge &a) const {
			return dist < a.dist;
		}
	};

	vector<int> Cx, Cy;
	vector<edge> all;

	double dist(double x1, double x2, double y1, double y2) {
		double dx = x1 - x2, dy = y1 - y2;
		return sqrt(dx * dx + dy * dy);
	}

public:
	double determineLength(vector<int> cityX, vector<int> cityY,
			vector<int> villageX, vector<int> villageY) {
		Cx.clear(), Cy.clear(), all.clear();
		Cx.insert(Cx.end(), cityX.begin(), cityX.end());
		Cx.insert(Cx.end(), villageX.begin(), villageX.end());
		Cy.insert(Cy.end(), cityY.begin(), cityY.end());
		Cy.insert(Cy.end(), villageY.begin(), villageY.end());

		DisjointSet DS(Cx.size());

		for (int i = 0; i < (int) Cx.size(); i++)
			for (int j = i + 1; j < (int) Cx.size(); j++)
				all.push_back(edge { dist(Cx[i], Cx[j], Cy[i], Cy[j]), i, j });

		for (int i = 0; i < (int) cityX.size(); i++)
			for (int j = i + 1; j < (int) cityX.size(); j++)
				DS.merge(i, j);
		sort(all.begin(), all.end());
		double ans = 0.0;

		for (int i = 0; i < (int) all.size(); i++)
			if (DS.merge(all[i].u, all[i].v))
				ans += all[i].dist;
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<int> p1,
		vector<int> p2, vector<int> p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	KingdomXCitiesandVillagesAnother *obj;
	double answer;
	obj = new KingdomXCitiesandVillagesAnother();
	clock_t startTime = clock();
	answer = obj->determineLength(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer
				&& fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	vector<int> p1;
	vector<int> p2;
	vector<int> p3;
	double p4;

	{
		// ----- test 0 -----
		int t0[] = { 1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2, 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1, 1 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 1, 2 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 2 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 2, 2 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2.0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 2 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2.8284271247461903;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
