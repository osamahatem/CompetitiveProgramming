#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

int dig[9];

int get_num_odd(){
    int ret=0,i,s;
    for(i=0;i<9;i++)
        if(dig[i]!=0)
            break;
    s=i;
    for(i=s;i<9-s;i++)
        ret=ret*10+dig[i];
    return ret;
}

int get_num_even(){
    int ret=0,i,s;
    for(i=0;i<9;i++)
        if(dig[i]!=0)
            break;
    s=i;
    for(i=s;i<8-s;i++)
        ret=ret*10+dig[i];
    return ret;
}

int get_odd(int n,int lim){
    if(n==9){
        int t=get_num_odd();
        if(t<=lim && t%10)
            return 1;
        return 0;
    }
    int ret=0;
    for(int i=0;i<=9;i++){
        dig[n]=dig[8-n]=i;
        ret+=get_odd(n+1,lim);
    }
    return ret;
}

int get_even(int n,int lim){
    if(n==8){
        int t=get_num_even();
        if(t<=lim && t%10)
            return 1;
        return 0;
    }
    int ret=0;
    for(int i=0;i<=9;i++){
        dig[n]=dig[7-n]=i;
        ret+=get_even(n+1,lim);
    }
    return ret;
}

class PalindromicNumbers {
public:
	int countPalNums(int lower, int upper) {
        int i,ret=0;
        for(i=0;i<=9;i++){
            dig[4]=i;
            ret+=get_odd(5,upper);
        }
        for(i=0;i<=9;i++){
            dig[4]=dig[3]=i;
            ret+=get_even(5,upper);
        }
        for(i=0;i<=9;i++){
            dig[4]=i;
            ret-=get_odd(5,lower-1);
        }
        for(i=0;i<=9;i++){
            dig[4]=dig[3]=i;
            ret-=get_even(5,lower-1);
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PalindromicNumbers *obj;
	int answer;
	obj = new PalindromicNumbers();
	clock_t startTime = clock();
	answer = obj->countPalNums(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 25;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 111;
	p1 = 222;
	p2 = 12;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 88966989;
	p1 = 88977987;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 999999990;
	p1 = 1000000000;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
