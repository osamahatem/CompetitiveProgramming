#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;


class MnemonicMemory {
public:
	string getPhrase(string number, vector <string> dictionary) {
		bool vis[55];
		int i,j,x;
		memset(vis,0,sizeof vis);
		string ret="";
		sort(dictionary.begin(),dictionary.end());
		for(i=0;i<number.size();i++){
            if(i>0)
                ret+=" ";
            x=number[i]-'0';
            for(j=0;j<dictionary.size();j++){
                if(x==(int)dictionary[j].size() && !vis[j]){
                    ret+=dictionary[j];
                    vis[j]=1;
                    break;
                }
            }
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MnemonicMemory *obj;
	string answer;
	obj = new MnemonicMemory();
	clock_t startTime = clock();
	answer = obj->getPhrase(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "25735";
	string t1[] = {"is","there","anybody","out","there"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "is there anybody out there";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "31415926";
	string t1[] = {"may","i","have","a","large","container","of","coffee"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "may a have i large container of coffee";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "1212";
	string t1[] = {"a","aa","a","aa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "a aa a aa";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "11111111122";
	string t1[] = {"a","b","d","c","a","e","f","z","zz","za","az","e"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "a a b c d e e f z az za";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "2222";
	string t1[] = {"ab","cd","ef","a","b","ab"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ab ab cd ef";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
