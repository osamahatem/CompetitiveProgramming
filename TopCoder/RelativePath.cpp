#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RelativePath {
public:
	string makeRelative(string path, string currentDir) {
		vector<string> p,cur;
		string temp,ret;
		int i;
		for(i=0;i<path.size();i++){
            temp.clear();
            while(i<path.size() && path[i]!='/')
                temp+=path[i++];
            p.push_back(temp);
		}
		for(i=0;i<currentDir.size();i++){
            temp.clear();
            while(i<currentDir.size() && currentDir[i]!='/')
                temp+=currentDir[i++];
            cur.push_back(temp);
		}
		i=0;
		while(i<cur.size() && i<p.size() && p[i]==cur[i])
            i++;
        int up=cur.size()-i,idx=i;
        bool flag=0;
        for(i=0;i<up;i++){
            if(i>0)
                ret+="/";
            ret+="..";
            flag=1;
        }
        for(i=idx;i<p.size();i++){
            if(flag)
                ret+="/";
            ret+=p[i];
            flag=1;
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RelativePath *obj;
	string answer;
	obj = new RelativePath();
	clock_t startTime = clock();
	answer = obj->makeRelative(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "/home/top/data/file";
	p1 = "/home/user/pictures";
	p2 = "../../top/data/file";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "/home/user/movies/title";
	p1 = "/home/user/pictures";
	p2 = "../movies/title";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "/file";
	p1 = "/";
	p2 = "file";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "/a/b/a/b/a/b";
	p1 = "/a/b/a/a/b/a/b";
	p2 = "../../../../b/a/b";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "/root/root/root";
	p1 = "/root";
	p2 = "root/root";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
