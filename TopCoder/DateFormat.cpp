#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct date{int d,m;};

bool valid(const date &a,const date &b){
    if(a.m!=b.m)
        return a.m<b.m;
    return a.d<b.d;
}

class DateFormat {
public:
	string fromEuropeanToUs(vector <string> dateList) {
		string dates="";
		int i,c=0,read,m,d;
		vector<date> D;
		date temp;
		D.clear();
		for(i=0;i<dateList.size();i++)
            dates+=dateList[i];
        while(sscanf(dates.c_str()+c,"%d/%d%n",&m,&d,&read)!=EOF){
            c+=read;
            temp.m=m,temp.d=d;
            D.push_back(temp);
        }
        for(i=0;i<D.size();i++)
            if(D[i].m>D[i].d)
                swap(D[i].m,D[i].d);
        for(i=0;i+1<D.size();i++){
            if(!valid(D[i],D[i+1])){
                swap(D[i+1].m,D[i+1].d);
                if(!valid(D[i],D[i+1]) || D[i+1].m>12)
                    return "";
            }
        }
        dates.clear();
        char t[10];
        for(i=0;i<D.size();i++){
            if(i>0)
                dates+=" ";
            sprintf(t,"%02d/%02d",D[i].m,D[i].d);
            dates+=(string)t;
        }
        return dates;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DateFormat *obj;
	string answer;
	obj = new DateFormat();
	clock_t startTime = clock();
	answer = obj->fromEuropeanToUs(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"16/01"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "01/16";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"02/01 08/02 08/02 21/09 06/11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "01/02 02/08 08/02 09/21 11/06";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"08/02 08/02 03/04"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"2","9/02"," 08/","03 01/08"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "02/29 03/08 08/01";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"17/01 05/05 03/07 07/24 23/09 09/30 01/11 11/11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "01/17 05/05 07/03 07/24 09/23 09/30 11/01 11/11";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
