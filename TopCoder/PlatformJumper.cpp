#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

struct platform{int x,y,c;};

bool valid(const platform &a,const platform &b,int v,int g){
    if(a.y<=b.y)
        return false;
    int dx=abs(a.x-b.x),dy=abs(a.y-b.y);
    double t=sqrt(dy*2.0/g);
    if(t+1e-9<(double)dx/v)
        return false;
    return true;
}

vector<platform> P;
vector<int> adj[50];
int dp[50];

int solve(int n){
    int &ret=dp[n];
    if(ret!=-1)
        return ret;
    ret=0;
    for(int i=0;i<adj[n].size();i++)
        ret=max(ret,solve(adj[n][i]));
    ret+=P[n].c;
    return ret;
}

class PlatformJumper {
public:
	int maxCoins(vector <string> platforms, int v, int g) {
	    memset(dp,-1,sizeof dp);
        int i,j,x,y,c;
        platform temp;
        for(i=0;i<platforms.size();i++){
            sscanf(platforms[i].c_str(),"%d%d%d",&x,&y,&c);
            temp.x=x,temp.y=y,temp.c=c;
            P.push_back(temp);
        }
        for(i=0;i<P.size();i++){
            for(j=0;j<P.size();j++)
                if(valid(P[i],P[j],v,g))
                    adj[i].push_back(j);
        }
        int ret=0;
        for(i=0;i<P.size();i++)
            ret=max(ret,solve(i));
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	PlatformJumper *obj;
	int answer;
	obj = new PlatformJumper();
	clock_t startTime = clock();
	answer = obj->maxCoins(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	string t0[] = {"3 10 7","5 15 7","8 9 12"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 10;
	p3 = 14;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"0 0 1","2 4 1","4 0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"0 0 1","5000 5000 10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 87;
	p3 = 10;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
