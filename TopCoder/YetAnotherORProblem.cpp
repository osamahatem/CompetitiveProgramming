#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

const long long MOD = 1000000009;

long long memo[61][1 << 10];
vector<long long> num;

long long solve(int bit, int low) {
	if (bit < 0)
		return 1;
	long long &ret = memo[bit][low];
	if (ret != -1)
		return ret;

	int tempLow = low;
	for (int i = 0; i < (int) num.size(); i++)
		if ((num[i] & (1ll << bit)) && !(low & (1 << i)))
			tempLow += (1ll << i);
	ret = solve(bit - 1, tempLow);

	for (int i = 0; i < (int) num.size(); i++) {
		if (!(low & (1 << i)) && !(num[i] & (1ll << bit)))
			continue;

		tempLow = low;
		for (int j = 0; j < (int) num.size(); j++) {
			if (i == j)
				continue;

			if (!(low & (1 << j)) && (num[j] & (1ll << bit)))
				tempLow += 1 << j;
		}
		ret = (ret + solve(bit - 1, tempLow)) % MOD;
	}

	return ret;
}

class YetAnotherORProblem {
public:
	int countSequences(vector<long long> R) {
		num = R;
		memset(memo, -1, sizeof memo);
		return solve(60, 0);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, bool hasAnswer,
		int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	YetAnotherORProblem *obj;
	int answer;
	obj = new YetAnotherORProblem();
	clock_t startTime = clock();
	answer = obj->countSequences(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<long long> p0;
	int p1;

	{
		// ----- test 0 -----
		long long t0[] = { 3ll, 5ll };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 15;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		long long t0[] = { 3ll, 3ll, 3ll };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 16;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		long long t0[] = { 1ll, 128ll };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 194;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		long long t0[] = { 26ll, 74ll, 25ll, 30ll };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 8409;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		long long t0[] = { 1000000000ll, 1000000000ll };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 420352509;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
