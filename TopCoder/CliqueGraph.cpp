#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

vector<int> E[2505];
long long dist[2505][2050];
bool vis[2505];

void BFS(int s){
    memset(vis,0,sizeof vis);
    queue< pair<int,int> > Q;
    int cur,curDist;
    Q.push(make_pair(s,0));
    while(Q.size()){
        cur=Q.front().first;
        curDist=Q.front().second;
        Q.pop();
        if(vis[cur])
            continue;
        dist[s][cur]=curDist;
        vis[cur]=1;
        for(int i=0;i<E[cur].size();i++){
            Q.push(make_pair(E[cur][i],curDist+1));
        }
    }
    return;
}

class CliqueGraph {
public:
	long long calcSum(int N, vector <int> V, vector <int> sizes) {
	    for(int i=0;i<N;i++){
            E[i].clear();
            for(int j=0;j<N;j++)
                dist[i][j]=-1;
	    }
        int s=0;
        for(int i=0;i<sizes.size();i++){
            for(int j=s;j<s+sizes[i];j++){
                for(int k=j+1;k<s+sizes[i];k++){
                    E[V[j]].push_back(V[k]);
                    E[V[k]].push_back(V[j]);
                }
            }
            s+=sizes[i];
        }
        for(int i=0;i<N;i++)
            BFS(i);
        long long ans=0;
        for(int i=0;i<N;i++)
            for(int j=i+1;j<N;j++)
                if(dist[i][j]!=-1)
                    ans+=dist[i][j];
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CliqueGraph *obj;
	long long answer;
	obj = new CliqueGraph();
	clock_t startTime = clock();
	answer = obj->calcSum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	vector <int> p2;
	long long p3;

	{
	// ----- test 0 -----
	p0 = 4;
	int t1[] = {0,1,2,0,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 8ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 5;
	int t1[] = {0,1,2,3,1,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 12ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 15;
	int t1[] = {1,3,5,7,9,11,13,0,2,3,6,7,10,11,14,0,4,5,6,7,12,13,14,0,8,9,10,11,12,13,14,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8,8,8,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 130ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
