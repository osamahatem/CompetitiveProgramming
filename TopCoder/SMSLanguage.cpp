#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SMSLanguage {
public:
	string translate(string text) {
		int i;
        string ret="";
		for(i=0;i<text.size();i++){
            if(text[i]=='.' || text[i]==',' || text[i]=='?' || text[i]=='!')
                continue;
            ret+=tolower(text[i]);
		}
		text=ret;
        for(i=0;i+2<text.size();i++){
            if(text[i]=='a' && text[i+1]=='t' && text[i+2]=='e'){
                text[i]='8';
                text[i+1]=text[i+2]='#';
            }else if(text[i]=='a' && text[i+1]=='n' && text[i+2]=='d'){
                text[i]='&';
                text[i+1]=text[i+2]='#';
            }else if(text[i]=='y' && text[i+1]=='o' && text[i+2]=='u'){
                text[i]='U';
                text[i+1]=text[i+2]='#';
            }
        }
        for(i=0;i+1<text.size();i++){
            if(text[i]=='a' && text[i+1]=='t'){
                text[i]='@';
                text[i+1]='#';
            }
        }
        ret.clear();
        for(i=0;i<text.size();i++)
            if(text[i]!='#')
                ret+=text[i];
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SMSLanguage *obj;
	string answer;
	obj = new SMSLanguage();
	clock_t startTime = clock();
	answer = obj->translate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "I HATE rats, and you?";
	p1 = "i h8 r@s & U";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "What is the weather like today?";
	p1 = "wh@ is the we@her like today";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "It is not too late to..";
	p1 = "it is not too l8 to";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "this text is already in sms language";
	p1 = "this text is already in sms language";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
